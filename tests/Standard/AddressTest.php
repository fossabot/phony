<?php

namespace Deligoez\Phony\Tests\Standard;

use Deligoez\Phony\Fakes\Fake;
use Deligoez\Phony\Tests\BaseTest;

class AddressTest extends BaseTest
{
    protected function setUp(): void
    {
        parent::setUp();

        $this->ðŸ§ª = $this->ðŸ™ƒ->address;
    }

    /** @test */
    public function can_call_by_emoji_alias(): void
    {
        // TODO: Move this test to Phony class
        $this->assertInstanceOf(
            Fake::class,
            $this->ðŸ™ƒ->ðŸ“«
        );
    }

    // region Magic Attributes

    /** @test */
    public function cityAttribute(): void
    {
        $this->assertIsString(
            $this->ðŸ§ª->city
        );
    }

    /** @test */
    public function cityWithStateAttribute(): void
    {
        $this->assertIsString(
            $this->ðŸ§ª->cityWithState
        );
    }

    /** @test */
    public function streetNameAttribute(): void
    {
        $this->assertIsString(
            $this->ðŸ§ª->streetName
        );
    }

    /** @test */
    public function secondaryAddressAttribute(): void
    {
        $this->assertIsString(
            $this->ðŸ§ª->secondaryAddress
        );
    }

    /** @test */
    public function streetAddressAttribute(): void
    {
        $this->assertIsString(
            $this->ðŸ§ª->streetAddress
        );
    }

    /** @test */
    public function streetAddressWithSecondaryAddressAttribute(): void
    {
        $this->assertIsString(
            $this->ðŸ§ª->streetAddressWithSecondaryAddress
        );
    }

    /** @test */
    public function buildingNumberAttribute(): void
    {
        $this->assertIsString(
            $this->ðŸ§ª->buildingNumber
        );
    }

    /** @test */
    public function communityAttribute(): void
    {
        $this->assertIsString(
            $this->ðŸ§ª->community
        );
    }

    /** @test */
    public function mailBoxAttribute(): void
    {
        $this->assertIsString(
            $this->ðŸ§ª->mailBox
        );
    }

    /** @test */
    public function zipCodeAttribute(): void
    {
        $this->assertIsString(
            $this->ðŸ§ª->zipCode
        );
    }

    /** @test */
    public function zipAttribute(): void
    {
        $this->assertIsString(
            $this->ðŸ§ª->zip
        );
    }

    /** @test */
    public function postcodeAttribute(): void
    {
        $this->assertIsString(
            $this->ðŸ§ª->postcode
        );
    }

    /** @test */
    public function timeZoneAttribute(): void
    {
        $this->assertIsString(
            $this->ðŸ§ª->timeZone
        );
    }

    /** @test */
    public function streetSuffixAttribute(): void
    {
        $this->assertIsString(
            $this->ðŸ§ª->streetSuffix
        );
    }

    /** @test */
    public function citySuffixAttribute(): void
    {
        $this->assertIsString(
            $this->ðŸ§ª->citySuffix
        );
    }

    /** @test */
    public function cityPrefixAttribute(): void
    {
        $this->assertIsString(
            $this->ðŸ§ª->cityPrefix
        );
    }

    /** @test */
    public function stateAbbrAttribute(): void
    {
        $this->assertIsString(
            $this->ðŸ§ª->stateAbbr
        );
    }

    /** @test */
    public function stateAttribute(): void
    {
        $this->assertIsString(
            $this->ðŸ§ª->state
        );
    }

    /** @test */
    public function countryAttribute(): void
    {
        $this->assertIsString(
            $this->ðŸ§ª->country
        );
    }

    /** @test */
    public function countryCodeAttribute(): void
    {
        $this->assertIsString(
            $this->ðŸ§ª->countryCode
        );
    }

    /** @test */
    public function countryCodeLongAttribute(): void
    {
        $this->assertIsString(
            $this->ðŸ§ª->countryCodeLong
        );
    }

    /** @test */
    public function fullAddressAttribute(): void
    {
        $this->assertIsString(
            $this->ðŸ§ª->fullAddress
        );
    }

    // endregion

    // region Functions

    /** @test *
     *
     * @throws \Exception
     */
    public function zipCodeMethod(): void
    {
        $this->assertIsString(
            $this->ðŸ§ª->zipCode()
        );
    }

    /** @test
     *
     * @throws \Exception
     */
    public function zipCodeWithStateAbbreviationMethod(): void
    {
        $this->assertIsString(
            $this->ðŸ§ª->zipCode('CO')
        );
    }

    /** @test *
     *
     * @throws \Exception
     */
    public function zipMethod(): void
    {
        $this->assertIsString(
            $this->ðŸ§ª->zip()
        );
    }

    /** @test *
     *
     * @throws \Exception
     */
    public function postcodeMethod(): void
    {
        $this->assertIsString(
            $this->ðŸ§ª->postcode()
        );
    }

    /** @test *
     *
     * @throws \Exception
     */
    public function countryByCodeMethod(): void
    {
        $this->assertIsString(
            $this->ðŸ§ª->countryByCode('NL')
        );
    }

    /** @test *
     *
     * @throws \Exception
     */
    public function countryNameToCodeMethod(): void
    {
        $this->assertIsString(
            $this->ðŸ§ª->countryNameToCode('united_states')
        );
    }

    // endregion
}
